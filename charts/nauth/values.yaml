# Default values for nauth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Set the url for your nats server.<BR>The default means nats is deployed in the `nats` namespace.
nats:
  url: nats://nats.nats.svc.cluster.local:4222

# -- Sets the replicaset count
replicaCount: 1

image:
  # -- Sets the operator image registry
  registry: ghcr.io/wirelesscar
  # -- Sets the operator repository
  repository: nauth-operator
  # -- Sets the pull policy for images.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  # @default -- appVersion
  tag: ""

# -- Override the chart name
nameOverride: ""

# -- Override the namespace
namespace:
  nameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  nameOverride: ""

# -- This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# -- Pod security context
podSecurityContext:
  runAsNonRoot: true
  # fsGroup: 2000

# -- SecurityContext of the container
securityContext:
  # This is defined by the distroless nonroot user
  runAsUser: 65532
  runAsGroup: 65532
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - "ALL"
  seccompProfile:
    type: RuntimeDefault

monitoring:
  # -- Enables nauth to use monitoring capabilities. Requires CRD:s to be installed.
  enabled: false
  # -- Enables serviceMonitor feature. Requies CRD to be installed beforehand.
  serviceMonitor:
    enabled: false

# -- Setting resources is up to the user. Follows PodSpec.
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# -- This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /healthz
    port: 8081
  initialDelaySeconds: 15
  periodSeconds: 20
readinessProbe:
  httpGet:
    path: /readyz
    port: 8081
  initialDelaySeconds: 5
  periodSeconds: 10

volumes: []

volumeMounts: []

terminationGracePeriodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

## @section CRDs
crds:
  ## @param crds.install Indicates if Custom Resource Definitions should be installed and upgraded as part of the release. If set to `false`, the CRDs will only be installed if they do not already exist.
  install: true
  ## @param crds.keep Indicates if Custom Resource Definitions should be kept when a release is uninstalled.
  keep: true
