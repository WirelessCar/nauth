---
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

import KubernetesIcon from "~icons/devicon/kubernetes";
import NatsIcon from "~icons/devicon/nats";

const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

// Use the same constant value as Starlight
const _PAGE_TITLE_ID = "_top";

const _imageAttrs = {
	loading: "eager" as const,
	decoding: "async" as const,
	width: 400,
	height: 400,
	alt: image?.alt || "",
};

let _darkImage: ImageMetadata | undefined;
let _lightImage: ImageMetadata | undefined;
let _rawHtml: string | undefined;
if (image) {
	if ("file" in image) {
		_darkImage = image.file;
	} else if ("dark" in image) {
		_darkImage = image.dark;
		_lightImage = image.light;
	} else {
		_rawHtml = image.html;
	}
}

// Custom tagline with icons
const _customTagline = tagline === "Simplify NATS Operator & Account management for Kubernetes";
---

<div class="hero">
	{
		_darkImage && (
			<Image
				src={_darkImage}
				{..._imageAttrs}
				class:list={{ 'light:sl-hidden': Boolean(_lightImage) }}
			/>
		)
	}
	{_lightImage && <Image src={_lightImage} {..._imageAttrs} class="dark:sl-hidden" />}
	{_rawHtml && <div class="hero-html sl-flex" set:html={_rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={_PAGE_TITLE_ID} data-page-title set:html={title} />
			{_customTagline ? (
				<div class="tagline">
					Simplify <NatsIcon class="inline-icon" /> NATS Operator & Account management for <KubernetesIcon class="inline-icon" /> Kubernetes
				</div>
			) : tagline && (
				<div class="tagline" set:html={tagline} />
			)}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(
						({ attrs: { class: className, ...attrs } = {}, icon, link: href, text, variant }) => (
							<LinkButton {href} {variant} icon={icon?.name} class:list={[className]} {...attrs}>
								{text}
								{icon?.html && <Fragment set:html={icon.html} />}
							</LinkButton>
						)
					)}
				</div>
			)
		}
	</div>
</div>

<style>
	@layer starlight.core {
		.hero {
			display: grid;
			align-items: center;
			gap: 1rem;
			padding-bottom: 1rem;
		}

		.hero > img,
		.hero > .hero-html {
			object-fit: contain;
			width: min(70%, 20rem);
			height: auto;
			margin-inline: auto;
		}

		.stack {
			flex-direction: column;
			gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
			text-align: center;
		}

		.copy {
			flex-direction: column;
			gap: 1rem;
			align-items: center;
		}

		.copy > * {
			max-width: 50ch;
		}

		h1 {
			font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
			line-height: var(--sl-line-height-headings);
			font-weight: 600;
			color: var(--sl-color-white);
		}

		.tagline {
			font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
			color: var(--sl-color-gray-2);
      max-width: 30ch;
		}

		.actions {
			gap: 1rem 2rem;
			flex-wrap: wrap;
			justify-content: center;
		}

		@media (min-width: 50rem) {
			.hero {
				grid-template-columns: 7fr 4fr;
				gap: 3%;
				padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
			}

			.hero > img,
			.hero > .hero-html {
				order: 2;
				width: min(100%, 25rem);
			}

			.stack {
				text-align: start;
			}

			.copy {
				align-items: flex-start;
			}

			.actions {
				justify-content: flex-start;
			}
		}
	}

	.inline-icon {
		display: inline-block;
		width: 1.2em;
		height: 1.2em;
		vertical-align: middle;
		margin: 0 0.25em;
		color: var(--sl-color-accent);
	}
</style>